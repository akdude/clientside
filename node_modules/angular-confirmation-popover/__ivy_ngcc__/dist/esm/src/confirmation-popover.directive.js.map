{"version":3,"file":"confirmation-popover.directive.js","sources":["../../../src/confirmation-popover.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Directive,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  ViewContainerRef,\n  ComponentRef,\n  OnDestroy,\n  ElementRef,\n  OnChanges,\n  OnInit,\n  ReflectiveInjector,\n  ResolvedReflectiveProvider,\n  ComponentFactoryResolver,\n  Renderer2,\n  TemplateRef,\n  ComponentFactory,\n  SimpleChanges\n} from '@angular/core';\nimport { ConfirmationPopoverWindowComponent } from './confirmation-popover-window.component';\nimport { ConfirmationPopoverOptions } from './confirmation-popover-options.provider';\nimport { ConfirmationPopoverWindowOptions } from './confirmation-popover-window-options.provider';\nimport { Positioning } from 'positioning';\n\n/**\n * @private\n */\nexport interface ConfirmCancelEvent {\n  clickEvent: MouseEvent;\n}\n\n/**\n * All properties can be set on the directive as attributes like so (use `ConfirmationPopoverModule.forRoot()` to configure them globally):\n * ```html\n * <button\n *  class=\"btn btn-default\"\n *  mwlConfirmationPopover\n *  [title]=\"title\"\n *  [message]=\"message\"\n *  placement=\"left\"\n *  (confirm)=\"confirmClicked = true\"\n *  (cancel)=\"cancelClicked = true\"\n *  [(isOpen)]=\"isOpen\">\n *   Show confirm popover!\n * </button>\n * ```\n */\n\nexport class ConfirmationPopoverDirective\n  implements OnDestroy, OnChanges, OnInit {\n  /**\n   * The title of the popover.\n   * Deprecated, will be removed in v4 - use popoverTitle instead\n   */\n   title: string;\n\n  /**\n   * The title of the popover\n   */\n   popoverTitle: string;\n\n  /**\n   * The body text of the popover.\n   * Deprecated, will be removed in v4 - use popoverMessage instead\n   */\n   message: string;\n\n  /**\n   * The body text of the popover.\n   */\n   popoverMessage: string;\n\n  /**\n   * The text of the confirm button. Default `Confirm`\n   */\n   confirmText: string;\n\n  /**\n   * The text of the cancel button. Default `Cancel`\n   */\n   cancelText: string;\n\n  /**\n   * The placement of the popover. It can be either `top`, `right`, `bottom` or `left`. Default `top`\n   */\n   placement: string;\n\n  /**\n   * The bootstrap button type of the confirm button. It can be any supported bootstrap color type\n   * e.g. `default`, `warning`, `danger` etc. Default `success`\n   */\n   confirmButtonType: string;\n\n  /**\n   * The bootstrap button type of the cancel button. It can be any supported bootstrap color type\n   * e.g. `default`, `warning`, `danger` etc. Default `default`\n   */\n   cancelButtonType: string;\n\n  /**\n   * Set to either `confirm` or `cancel` to focus the confirm or cancel button.\n   * If omitted, by default it will not focus either button.\n   */\n   focusButton: string;\n\n  /**\n   * Whether to hide the confirm button. Default `false`.\n   */\n   hideConfirmButton: boolean;\n\n  /**\n   * Whether to hide the cancel button. Default `false`.\n   */\n   hideCancelButton: boolean;\n\n  /**\n   * Whether to disable showing the popover. Default `false`.\n   */\n   isDisabled: boolean = false;\n\n  /**\n   * Will open or show the popover when changed.\n   * Can be sugared with `isOpenChange` to emulate 2-way binding like so `[(isOpen)]=\"isOpen\"`\n   */\n   isOpen: boolean = false;\n\n  /**\n   * A reference to a <ng-template> tag that if set will override the popovers template. Use like so:\n   * ```html\n   * <ng-template #customTemplate let-options=\"options\">\n   *   <div [class]=\"'popover ' + options.placement\" style=\"display: block\">\n   *     My custom template\n   *   </div>\n   * </ng-template>\n   * ```\n   *\n   * Then pass customTemplate to the mwlConfirmationPopover directive like so `[customTemplate]=\"customTemplate\"`\n   */\n   customTemplate: TemplateRef<any>;\n\n  /**\n   * Will emit when the popover is opened or closed\n   */\n   isOpenChange: EventEmitter<boolean> = new EventEmitter(true);\n\n  /**\n   * An expression that is called when the confirm button is clicked.\n   */\n   confirm: EventEmitter<ConfirmCancelEvent> = new EventEmitter();\n\n  /**\n   * An expression that is called when the cancel button is clicked.\n   */\n   cancel: EventEmitter<ConfirmCancelEvent> = new EventEmitter();\n\n  /**\n   * A custom CSS class to be added to the popover\n   */\n   popoverClass: string;\n\n  /**\n   * Append the element to the document body rather than the trigger element\n   */\n   appendToBody: boolean;\n\n  /**\n   * @private\n   */\n  popover: ComponentRef<ConfirmationPopoverWindowComponent>;\n\n  /**\n   * @private\n   */\n  eventListeners: Array<() => void> = [];\n\n  /**\n   * @private\n   */\n  constructor(\n    private viewContainerRef: ViewContainerRef,\n    private elm: ElementRef,\n    private defaultOptions: ConfirmationPopoverOptions,\n    private cfr: ComponentFactoryResolver,\n    private position: Positioning,\n    private renderer: Renderer2\n  ) {}\n\n  /**\n   * @private\n   */\n  ngOnInit(): void {\n    this.isOpenChange.emit(false);\n  }\n\n  /**\n   * @private\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.isOpen) {\n      if (changes.isOpen.currentValue === true) {\n        this.showPopover();\n      } else {\n        this.hidePopover();\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  ngOnDestroy() {\n    this.hidePopover();\n  }\n\n  /**\n   * @private\n   */\n  onConfirm(event: ConfirmCancelEvent) {\n    this.confirm.emit(event);\n    this.hidePopover();\n  }\n\n  /**\n   * @private\n   */\n  onCancel(event: ConfirmCancelEvent) {\n    this.cancel.emit(event);\n    this.hidePopover();\n  }\n\n  /**\n   * @private\n   */\n  \n  togglePopover(): void {\n    if (!this.popover) {\n      this.showPopover();\n    } else {\n      this.hidePopover();\n    }\n  }\n\n  private onDocumentClick(event: Event): void {\n    if (\n      this.popover &&\n      !this.elm.nativeElement.contains(event.target) &&\n      !this.popover.location.nativeElement.contains(event.target)\n    ) {\n      this.hidePopover();\n    }\n  }\n\n  private showPopover(): void {\n    if (!this.popover && !this.isDisabled) {\n      // work around for https://github.com/mattlewis92/angular-confirmation-popover/issues/65\n      // otherwise the document click event gets fired after the click event\n      // that triggered the popover to open (no idea why this is so)\n      setTimeout(() => {\n        this.eventListeners = [\n          this.renderer.listen('document', 'click', (event: Event) =>\n            this.onDocumentClick(event)\n          ),\n          this.renderer.listen('document', 'touchend', (event: Event) =>\n            this.onDocumentClick(event)\n          ),\n          this.renderer.listen('window', 'resize', () => this.positionPopover())\n        ];\n      });\n\n      const options = new ConfirmationPopoverWindowOptions();\n      Object.assign(options, this.defaultOptions, {\n        title: this.popoverTitle || this.title,\n        message: this.popoverMessage || this.message,\n        onConfirm: (event: ConfirmCancelEvent): void => {\n          this.onConfirm(event);\n        },\n        onCancel: (event: ConfirmCancelEvent): void => {\n          this.onCancel(event);\n        },\n        onAfterViewInit: (): void => {\n          this.positionPopover();\n        }\n      });\n\n      const optionalParams: Array<keyof ConfirmationPopoverDirective> = [\n        'confirmText',\n        'cancelText',\n        'placement',\n        'confirmButtonType',\n        'cancelButtonType',\n        'focusButton',\n        'hideConfirmButton',\n        'hideCancelButton',\n        'popoverClass',\n        'appendToBody',\n        'customTemplate'\n      ];\n      optionalParams.forEach(param => {\n        if (typeof this[param] !== 'undefined') {\n          (options as any)[param] = this[param];\n        }\n      });\n\n      const componentFactory: ComponentFactory<\n        ConfirmationPopoverWindowComponent\n      > = this.cfr.resolveComponentFactory(ConfirmationPopoverWindowComponent);\n      const binding: ResolvedReflectiveProvider[] = ReflectiveInjector.resolve([\n        {\n          provide: ConfirmationPopoverWindowOptions,\n          useValue: options\n        }\n      ]);\n      const contextInjector = this.viewContainerRef.parentInjector;\n      const childInjector = ReflectiveInjector.fromResolvedProviders(\n        binding,\n        contextInjector\n      );\n      this.popover = this.viewContainerRef.createComponent(\n        componentFactory,\n        this.viewContainerRef.length,\n        childInjector\n      );\n      if (options.appendToBody) {\n        document.body.appendChild(this.popover.location.nativeElement);\n      }\n      this.isOpenChange.emit(true);\n    }\n  }\n\n  private positionPopover(): void {\n    if (this.popover) {\n      const popoverElement = this.popover.location.nativeElement.children[0];\n      const popoverPosition = this.position.positionElements(\n        this.elm.nativeElement,\n        popoverElement,\n        this.placement || this.defaultOptions.placement,\n        this.appendToBody || this.defaultOptions.appendToBody\n      );\n      this.renderer.setStyle(popoverElement, 'top', `${popoverPosition.top}px`);\n      this.renderer.setStyle(\n        popoverElement,\n        'left',\n        `${popoverPosition.left}px`\n      );\n    }\n  }\n\n  private hidePopover(): void {\n    if (this.popover) {\n      this.popover.destroy();\n      delete this.popover;\n      this.isOpenChange.emit(false);\n      this.eventListeners.forEach(fn => fn());\n      this.eventListeners = [];\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mwlConfirmationPopover]'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n{type: ElementRef, },\n{type: ConfirmationPopoverOptions, },\n{type: ComponentFactoryResolver, },\n{type: Positioning, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'title': [{ type: Input },],\n'popoverTitle': [{ type: Input },],\n'message': [{ type: Input },],\n'popoverMessage': [{ type: Input },],\n'confirmText': [{ type: Input },],\n'cancelText': [{ type: Input },],\n'placement': [{ type: Input },],\n'confirmButtonType': [{ type: Input },],\n'cancelButtonType': [{ type: Input },],\n'focusButton': [{ type: Input },],\n'hideConfirmButton': [{ type: Input },],\n'hideCancelButton': [{ type: Input },],\n'isDisabled': [{ type: Input },],\n'isOpen': [{ type: Input },],\n'customTemplate': [{ type: Input },],\n'isOpenChange': [{ type: Output },],\n'confirm': [{ type: Output },],\n'cancel': [{ type: Output },],\n'popoverClass': [{ type: Input },],\n'appendToBody': [{ type: Input },],\n'togglePopover': [{ type: HostListener, args: ['click', ] },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}