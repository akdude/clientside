import { Component } from '@angular/core';
import { ConfirmationPopoverWindowOptions } from './confirmation-popover-window-options.provider';
/**
 * @private
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from './focus.directive';

var _c0 = function (a0) { return { "col-xs-offset-3 col-offset-3": a0 }; };
function ConfirmationPopoverWindowComponent_ng_template_0_div_6_Template(rf, ctx) { if (rf & 1) {
    var _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 9);
    ɵngcc0.ɵɵelementStart(1, "button", 10);
    ɵngcc0.ɵɵlistener("click", function ConfirmationPopoverWindowComponent_ng_template_0_div_6_Template_button_click_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r7); var options_r3 = ɵngcc0.ɵɵnextContext().options; return options_r3.onConfirm({ clickEvent: $event }); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var options_r3 = ɵngcc0.ɵɵnextContext().options;
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(5, _c0, options_r3.hideCancelButton));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassMap("btn btn-block btn-" + options_r3.confirmButtonType);
    ɵngcc0.ɵɵproperty("mwlFocus", options_r3.focusButton === "confirm")("innerHtml", options_r3.confirmText, ɵngcc0.ɵɵsanitizeHtml);
} }
function ConfirmationPopoverWindowComponent_ng_template_0_div_7_Template(rf, ctx) { if (rf & 1) {
    var _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 9);
    ɵngcc0.ɵɵelementStart(1, "button", 10);
    ɵngcc0.ɵɵlistener("click", function ConfirmationPopoverWindowComponent_ng_template_0_div_7_Template_button_click_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r11); var options_r3 = ɵngcc0.ɵɵnextContext().options; return options_r3.onCancel({ clickEvent: $event }); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var options_r3 = ɵngcc0.ɵɵnextContext().options;
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(5, _c0, options_r3.hideConfirmButton));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassMap("btn btn-block btn-" + options_r3.cancelButtonType);
    ɵngcc0.ɵɵproperty("mwlFocus", options_r3.focusButton === "cancel")("innerHtml", options_r3.cancelText, ɵngcc0.ɵɵsanitizeHtml);
} }
var _c1 = function (a1, a2, a3, a4) { return ["popover", a1, a2, a3, a4]; };
function ConfirmationPopoverWindowComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 2);
    ɵngcc0.ɵɵelement(1, "div", 3);
    ɵngcc0.ɵɵelement(2, "h3", 4);
    ɵngcc0.ɵɵelementStart(3, "div", 5);
    ɵngcc0.ɵɵelement(4, "p", 6);
    ɵngcc0.ɵɵelementStart(5, "div", 7);
    ɵngcc0.ɵɵtemplate(6, ConfirmationPopoverWindowComponent_ng_template_0_div_6_Template, 2, 7, "div", 8);
    ɵngcc0.ɵɵtemplate(7, ConfirmationPopoverWindowComponent_ng_template_0_div_7_Template, 2, 7, "div", 8);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var options_r3 = ctx.options;
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction4(5, _c1, options_r3.placement, "popover-" + options_r3.placement, "bs-popover-" + options_r3.placement, options_r3.popoverClass));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("innerHTML", options_r3.title, ɵngcc0.ɵɵsanitizeHtml);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("innerHTML", options_r3.message, ɵngcc0.ɵɵsanitizeHtml);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", !options_r3.hideConfirmButton);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !options_r3.hideCancelButton);
} }
function ConfirmationPopoverWindowComponent_ng_template_2_Template(rf, ctx) { }
var _c2 = function (a0) { return { options: a0 }; };
var ConfirmationPopoverWindowComponent = (function () {
    function ConfirmationPopoverWindowComponent(options) {
        this.options = options;
    }
    ConfirmationPopoverWindowComponent.prototype.ngAfterViewInit = function () {
        this.options.onAfterViewInit();
    };
    /** @nocollapse */
    ConfirmationPopoverWindowComponent.ctorParameters = function () { return [
        { type: ConfirmationPopoverWindowOptions, },
    ]; };
ConfirmationPopoverWindowComponent.ɵfac = function ConfirmationPopoverWindowComponent_Factory(t) { return new (t || ConfirmationPopoverWindowComponent)(ɵngcc0.ɵɵdirectiveInject(ConfirmationPopoverWindowOptions)); };
ConfirmationPopoverWindowComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ConfirmationPopoverWindowComponent, selectors: [["ng-component"]], decls: 3, vars: 4, consts: [["defaultTemplate", ""], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [3, "ngClass"], [1, "popover-arrow", "arrow"], [1, "popover-title", "popover-header", 3, "innerHTML"], [1, "popover-content", "popover-body"], [3, "innerHTML"], [1, "row"], ["class", "col-xs-6 col-6", 3, "ngClass", 4, "ngIf"], [1, "col-xs-6", "col-6", 3, "ngClass"], ["type", "button", 3, "mwlFocus", "innerHtml", "click"]], template: function ConfirmationPopoverWindowComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, ConfirmationPopoverWindowComponent_ng_template_0_Template, 8, 10, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(2, ConfirmationPopoverWindowComponent_ng_template_2_Template, 0, 0, "ng-template", 1);
    } if (rf & 2) {
        var _r0 = ɵngcc0.ɵɵreference(1);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.options.customTemplate || _r0)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(2, _c2, ctx.options));
    } }, directives: [ɵngcc1.NgTemplateOutlet, ɵngcc1.NgClass, ɵngcc1.NgIf, ɵngcc2.FocusDirective], styles: [".popover[_ngcontent-%COMP%] {\n      display: block;\n    }\n    .bs-popover-top[_ngcontent-%COMP%]   .arrow[_ngcontent-%COMP%], .bs-popover-bottom[_ngcontent-%COMP%]   .arrow[_ngcontent-%COMP%] {\n      left: 50%;\n    }\n    .bs-popover-left[_ngcontent-%COMP%]   .arrow[_ngcontent-%COMP%], .bs-popover-right[_ngcontent-%COMP%]   .arrow[_ngcontent-%COMP%] {\n      top: 50%;\n    }\n    .btn[_ngcontent-%COMP%] {\n      transition: none;\n    }"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ConfirmationPopoverWindowComponent, [{
        type: Component,
        args: [{
                styles: [
                    "\n    .popover {\n      display: block;\n    }\n    .bs-popover-top .arrow, .bs-popover-bottom .arrow {\n      left: 50%;\n    }\n    .bs-popover-left .arrow, .bs-popover-right .arrow {\n      top: 50%;\n    }\n    .btn {\n      transition: none;\n    }\n  "
                ],
                template: "\n    <ng-template #defaultTemplate let-options=\"options\">\n      <div [ngClass]=\"[\n        'popover',\n        options.placement,\n        'popover-' + options.placement,\n        'bs-popover-' + options.placement,\n        options.popoverClass\n      ]\">\n        <div class=\"popover-arrow arrow\"></div>\n        <h3 class=\"popover-title popover-header\" [innerHTML]=\"options.title\"></h3>\n        <div class=\"popover-content popover-body\">\n          <p [innerHTML]=\"options.message\"></p>\n          <div class=\"row\">\n            <div\n              class=\"col-xs-6 col-6\"\n              [ngClass]=\"{'col-xs-offset-3 col-offset-3': options.hideCancelButton}\"\n              *ngIf=\"!options.hideConfirmButton\">\n              <button\n                type=\"button\"\n                [mwlFocus]=\"options.focusButton === 'confirm'\"\n                [class]=\"'btn btn-block btn-' + options.confirmButtonType\"\n                (click)=\"options.onConfirm({clickEvent: $event})\"\n                [innerHtml]=\"options.confirmText\">\n              </button>\n            </div>\n            <div\n              class=\"col-xs-6 col-6\"\n              [ngClass]=\"{'col-xs-offset-3 col-offset-3': options.hideConfirmButton}\"\n              *ngIf=\"!options.hideCancelButton\">\n              <button\n                type=\"button\"\n                [mwlFocus]=\"options.focusButton === 'cancel'\"\n                [class]=\"'btn btn-block btn-' + options.cancelButtonType\"\n                (click)=\"options.onCancel({clickEvent: $event})\"\n                [innerHtml]=\"options.cancelText\">\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"options.customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{options: options}\">\n    </ng-template>\n  "
            }]
    }], function () { return [{ type: ConfirmationPopoverWindowOptions }]; }, null); })();
    return ConfirmationPopoverWindowComponent;
}());
export { ConfirmationPopoverWindowComponent };

//# sourceMappingURL=confirmation-popover-window.component.js.map