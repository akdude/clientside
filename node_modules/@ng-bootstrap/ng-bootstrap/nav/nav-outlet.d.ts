import { AfterViewInit, ChangeDetectorRef, ElementRef } from '@angular/core';
import { NgbNav, NgbNavItem } from './nav';
import * as ɵngcc0 from '@angular/core';
export declare class NgbNavPane {
    elRef: ElementRef<HTMLElement>;
    item: NgbNavItem;
    nav: NgbNav;
    role: string;
    constructor(elRef: ElementRef<HTMLElement>);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgbNavPane, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<NgbNavPane, "[ngbNavPane]", never, { "item": "item"; "nav": "nav"; "role": "role"; }, {}, never>;
}
/**
 * The outlet where currently active nav content will be displayed.
 *
 * @since 5.2.0
 */
export declare class NgbNavOutlet implements AfterViewInit {
    private _cd;
    private _activePane;
    private _panes;
    /**
     * A role to set on the nav pane
     */
    paneRole: any;
    /**
     * Reference to the `NgbNav`
     */
    nav: NgbNav;
    constructor(_cd: ChangeDetectorRef);
    isPanelTransitioning(item: NgbNavItem): boolean;
    ngAfterViewInit(): void;
    private _getPaneForItem;
    private _getActivePane;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgbNavOutlet, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgbNavOutlet, "[ngbNavOutlet]", never, { "paneRole": "paneRole"; "nav": "ngbNavOutlet"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2LW91dGxldC5kLnRzIiwic291cmNlcyI6WyJuYXYtb3V0bGV0LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgQ2hhbmdlRGV0ZWN0b3JSZWYsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5nYk5hdiwgTmdiTmF2SXRlbSB9IGZyb20gJy4vbmF2JztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5nYk5hdlBhbmUge1xuICAgIGVsUmVmOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PjtcbiAgICBpdGVtOiBOZ2JOYXZJdGVtO1xuICAgIG5hdjogTmdiTmF2O1xuICAgIHJvbGU6IHN0cmluZztcbiAgICBjb25zdHJ1Y3RvcihlbFJlZjogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4pO1xufVxuLyoqXG4gKiBUaGUgb3V0bGV0IHdoZXJlIGN1cnJlbnRseSBhY3RpdmUgbmF2IGNvbnRlbnQgd2lsbCBiZSBkaXNwbGF5ZWQuXG4gKlxuICogQHNpbmNlIDUuMi4wXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5nYk5hdk91dGxldCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuICAgIHByaXZhdGUgX2NkO1xuICAgIHByaXZhdGUgX2FjdGl2ZVBhbmU7XG4gICAgcHJpdmF0ZSBfcGFuZXM7XG4gICAgLyoqXG4gICAgICogQSByb2xlIHRvIHNldCBvbiB0aGUgbmF2IHBhbmVcbiAgICAgKi9cbiAgICBwYW5lUm9sZTogYW55O1xuICAgIC8qKlxuICAgICAqIFJlZmVyZW5jZSB0byB0aGUgYE5nYk5hdmBcbiAgICAgKi9cbiAgICBuYXY6IE5nYk5hdjtcbiAgICBjb25zdHJ1Y3RvcihfY2Q6IENoYW5nZURldGVjdG9yUmVmKTtcbiAgICBpc1BhbmVsVHJhbnNpdGlvbmluZyhpdGVtOiBOZ2JOYXZJdGVtKTogYm9vbGVhbjtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBwcml2YXRlIF9nZXRQYW5lRm9ySXRlbTtcbiAgICBwcml2YXRlIF9nZXRBY3RpdmVQYW5lO1xufVxuIl19