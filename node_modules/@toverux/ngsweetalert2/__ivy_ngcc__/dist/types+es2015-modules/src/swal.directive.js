import { Directive, EventEmitter, HostListener, Inject, Input, Output } from '@angular/core';
import swal from 'sweetalert2';
import { SWAL_DEFAULTS } from './di';
import * as ɵngcc0 from '@angular/core';
var SwalDirective = (function () {
    function SwalDirective(defaultSwalOptions) {
        this.defaultSwalOptions = defaultSwalOptions;
        this.confirm = new EventEmitter();
        this.cancel = new EventEmitter();
        this.modalOptions = {};
    }
    Object.defineProperty(SwalDirective.prototype, "swal", {
        set: function (options) {
            if (Array.isArray(options)) {
                this.modalOptions.title = options[0], this.modalOptions.text = options[1];
                if (options.length >= 3) {
                    this.modalOptions.type = options[2];
                }
            }
            else {
                this.modalOptions = options;
            }
        },
        enumerable: true,
        configurable: true
    });
    SwalDirective.prototype.onHostClicked = function (event) {
        var _this = this;
        event.preventDefault();
        event.stopImmediatePropagation();
        var options = Object.assign({}, this.defaultSwalOptions, this.modalOptions);
        swal(options).then(function (success) { return _this.confirm.emit(success); }, function (dismiss) { return _this.cancel.emit(dismiss); });
    };
SwalDirective.ɵfac = function SwalDirective_Factory(t) { return new (t || SwalDirective)(ɵngcc0.ɵɵdirectiveInject(SWAL_DEFAULTS)); };
SwalDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: SwalDirective, selectors: [["", "swal", ""]], hostBindings: function SwalDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function SwalDirective_click_HostBindingHandler($event) { return ctx.onHostClicked($event); });
    } }, inputs: { swal: "swal" }, outputs: { confirm: "confirm", cancel: "cancel" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SwalDirective, [{
        type: Directive,
        args: [{ selector: '[swal]' }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [SWAL_DEFAULTS]
            }] }]; }, { confirm: [{
            type: Output
        }], cancel: [{
            type: Output
        }], swal: [{
            type: Input
        }], onHostClicked: [{
            type: HostListener,
            args: ['click', ['$event']]
        }] }); })();
    return SwalDirective;
}());
export { SwalDirective };
/** @nocollapse */
SwalDirective.ctorParameters = function () { return [
    { type: undefined, decorators: [{ type: Inject, args: [SWAL_DEFAULTS,] },] },
]; };
SwalDirective.propDecorators = {
    'swal': [{ type: Input },],
    'confirm': [{ type: Output },],
    'cancel': [{ type: Output },],
    'onHostClicked': [{ type: HostListener, args: ['click', ['$event'],] },],
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dhbC5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbInN3YWwuZGlyZWN0aXZlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFBTTtBQUNOO0FBQ0E7QUFDQSx5QkFHRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFdmVudEVtaXR0ZXIsIEhvc3RMaXN0ZW5lciwgSW5qZWN0LCBJbnB1dCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgc3dhbCBmcm9tICdzd2VldGFsZXJ0Mic7XG5pbXBvcnQgeyBTV0FMX0RFRkFVTFRTIH0gZnJvbSAnLi9kaSc7XG52YXIgU3dhbERpcmVjdGl2ZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3dhbERpcmVjdGl2ZShkZWZhdWx0U3dhbE9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5kZWZhdWx0U3dhbE9wdGlvbnMgPSBkZWZhdWx0U3dhbE9wdGlvbnM7XG4gICAgICAgIHRoaXMuY29uZmlybSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5jYW5jZWwgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMubW9kYWxPcHRpb25zID0ge307XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTd2FsRGlyZWN0aXZlLnByb3RvdHlwZSwgXCJzd2FsXCIsIHtcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob3B0aW9ucykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGFsT3B0aW9ucy50aXRsZSA9IG9wdGlvbnNbMF0sIHRoaXMubW9kYWxPcHRpb25zLnRleHQgPSBvcHRpb25zWzFdO1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmxlbmd0aCA+PSAzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW9kYWxPcHRpb25zLnR5cGUgPSBvcHRpb25zWzJdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMubW9kYWxPcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgU3dhbERpcmVjdGl2ZS5wcm90b3R5cGUub25Ib3N0Q2xpY2tlZCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLmRlZmF1bHRTd2FsT3B0aW9ucywgdGhpcy5tb2RhbE9wdGlvbnMpO1xuICAgICAgICBzd2FsKG9wdGlvbnMpLnRoZW4oZnVuY3Rpb24gKHN1Y2Nlc3MpIHsgcmV0dXJuIF90aGlzLmNvbmZpcm0uZW1pdChzdWNjZXNzKTsgfSwgZnVuY3Rpb24gKGRpc21pc3MpIHsgcmV0dXJuIF90aGlzLmNhbmNlbC5lbWl0KGRpc21pc3MpOyB9KTtcbiAgICB9O1xuICAgIHJldHVybiBTd2FsRGlyZWN0aXZlO1xufSgpKTtcbmV4cG9ydCB7IFN3YWxEaXJlY3RpdmUgfTtcblN3YWxEaXJlY3RpdmUuZGVjb3JhdG9ycyA9IFtcbiAgICB7IHR5cGU6IERpcmVjdGl2ZSwgYXJnczogW3sgc2VsZWN0b3I6ICdbc3dhbF0nIH0sXSB9LFxuXTtcbi8qKiBAbm9jb2xsYXBzZSAqL1xuU3dhbERpcmVjdGl2ZS5jdG9yUGFyYW1ldGVycyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFtcbiAgICB7IHR5cGU6IHVuZGVmaW5lZCwgZGVjb3JhdG9yczogW3sgdHlwZTogSW5qZWN0LCBhcmdzOiBbU1dBTF9ERUZBVUxUUyxdIH0sXSB9LFxuXTsgfTtcblN3YWxEaXJlY3RpdmUucHJvcERlY29yYXRvcnMgPSB7XG4gICAgJ3N3YWwnOiBbeyB0eXBlOiBJbnB1dCB9LF0sXG4gICAgJ2NvbmZpcm0nOiBbeyB0eXBlOiBPdXRwdXQgfSxdLFxuICAgICdjYW5jZWwnOiBbeyB0eXBlOiBPdXRwdXQgfSxdLFxuICAgICdvbkhvc3RDbGlja2VkJzogW3sgdHlwZTogSG9zdExpc3RlbmVyLCBhcmdzOiBbJ2NsaWNrJywgWyckZXZlbnQnXSxdIH0sXSxcbn07XG4iXX0=